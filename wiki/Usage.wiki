= Usage =

In order to try this integration standard modified (server part) GWT "Hello World" application bundled with Eclipse plugin can be built and run.

1. Checkout http://code.google.com/p/gspring/source/browse/#svn%2Ftrunk%2Fsample

2.
Run
{{{
mvn clean package
}}}

3.
Run
{{{
mvn jetty:run-war
}}}


Typical usage of this integration in projects is shown below

===Spring context file===
{{{
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/context
		   http://www.springframework.org/schema/context/spring-context-3.1.xsd
		   http://www.springframework.org/schema/mvc
		   http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

	<mvc:annotation-driven />

	<context:annotation-config />

	<context:component-scan base-package="org.gspring.mvc.sample" />

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- Optional: used by gspring -->
	<bean id="cacheManager"
		class="org.springframework.cache.concurrent.ConcurrentMapCacheManager" />
</beans>


}}}

===web.xml file===
{{{
	<!-- ... -->
	<servlet-mapping>
		<servlet-name>DispatcherServlet</servlet-name>
		<url-pattern>*.gwt</url-pattern>
	</servlet-mapping>
	<!-- ... -->
}}}


===Service interface===
{{{
@RemoteServiceRelativePath("greet/greetingService.gwt")
public interface GreetingService extends RemoteService {
	String greetServer(String name);
}
}}}


===Class implementer===
{{{

@Service("greetingService")
public class GreetingServiceImpl implements GreetingService {
	@Override
	public String greetServer(String name) {
		return MessageFormat.format("Hello, {0}!", name);
	}
}
}}}